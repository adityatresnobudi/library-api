// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adityatresnobudi/library-api/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// BorrowRecordUsecase is an autogenerated mock type for the BorrowRecordUsecase type
type BorrowRecordUsecase struct {
	mock.Mock
}

// BorrowBook provides a mock function with given fields: ctx, record, requestId
func (_m *BorrowRecordUsecase) BorrowBook(ctx context.Context, record dto.BorrowRecordsDTO, requestId int) (dto.BorrowRecordsDTO, error) {
	ret := _m.Called(ctx, record, requestId)

	var r0 dto.BorrowRecordsDTO
	if rf, ok := ret.Get(0).(func(context.Context, dto.BorrowRecordsDTO, int) dto.BorrowRecordsDTO); ok {
		r0 = rf(ctx, record, requestId)
	} else {
		r0 = ret.Get(0).(dto.BorrowRecordsDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.BorrowRecordsDTO, int) error); ok {
		r1 = rf(ctx, record, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBorrowRecordByID provides a mock function with given fields: ctx, id
func (_m *BorrowRecordUsecase) GetBorrowRecordByID(ctx context.Context, id int) (dto.BorrowRecordsDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 dto.BorrowRecordsDTO
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.BorrowRecordsDTO); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.BorrowRecordsDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBook provides a mock function with given fields: ctx, record, requestId
func (_m *BorrowRecordUsecase) ReturnBook(ctx context.Context, record dto.BorrowRecordsDTO, requestId int) (dto.BorrowRecordsDTO, error) {
	ret := _m.Called(ctx, record, requestId)

	var r0 dto.BorrowRecordsDTO
	if rf, ok := ret.Get(0).(func(context.Context, dto.BorrowRecordsDTO, int) dto.BorrowRecordsDTO); ok {
		r0 = rf(ctx, record, requestId)
	} else {
		r0 = ret.Get(0).(dto.BorrowRecordsDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.BorrowRecordsDTO, int) error); ok {
		r1 = rf(ctx, record, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowRecordUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowRecordUsecase creates a new instance of BorrowRecordUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowRecordUsecase(t mockConstructorTestingTNewBorrowRecordUsecase) *BorrowRecordUsecase {
	mock := &BorrowRecordUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
