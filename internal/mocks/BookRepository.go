// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/adityatresnobudi/library-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// AddOne provides a mock function with given fields: ctx, book
func (_m *BookRepository) AddOne(ctx context.Context, book model.Books) (model.Books, error) {
	ret := _m.Called(ctx, book)

	var r0 model.Books
	if rf, ok := ret.Get(0).(func(context.Context, model.Books) model.Books); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(model.Books)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Books) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllBooks provides a mock function with given fields: ctx, title
func (_m *BookRepository) FindAllBooks(ctx context.Context, title string) ([]model.Books, error) {
	ret := _m.Called(ctx, title)

	var r0 []model.Books
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Books); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Books)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
