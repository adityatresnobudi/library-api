// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adityatresnobudi/library-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// BookUsecase is an autogenerated mock type for the BookUsecase type
type BookUsecase struct {
	mock.Mock
}

// AddBooks provides a mock function with given fields: ctx, book
func (_m *BookUsecase) AddBooks(ctx context.Context, book dto.BookPayload) (dto.BookResponse, error) {
	ret := _m.Called(ctx, book)

	var r0 dto.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.BookPayload) dto.BookResponse); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(dto.BookResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.BookPayload) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields: ctx, title
func (_m *BookUsecase) GetBooks(ctx context.Context, title string) ([]dto.BooksDTO, error) {
	ret := _m.Called(ctx, title)

	var r0 []dto.BooksDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.BooksDTO); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BooksDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookUsecase creates a new instance of BookUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookUsecase(t mockConstructorTestingTNewBookUsecase) *BookUsecase {
	mock := &BookUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
