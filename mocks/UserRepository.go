// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/adityatresnobudi/library-api/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepository) Create(ctx context.Context, user model.Users) (model.Users, error) {
	ret := _m.Called(ctx, user)

	var r0 model.Users
	if rf, ok := ret.Get(0).(func(context.Context, model.Users) model.Users); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(model.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Users) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, name
func (_m *UserRepository) FindAll(ctx context.Context, name string) ([]model.Users, error) {
	ret := _m.Called(ctx, name)

	var r0 []model.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Users); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) FindByEmail(ctx context.Context, email string) (model.Users, error) {
	ret := _m.Called(ctx, email)

	var r0 model.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Users); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
