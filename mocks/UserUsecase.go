// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adityatresnobudi/library-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUsers provides a mock function with given fields: ctx, user
func (_m *UserUsecase) CreateUsers(ctx context.Context, user dto.UserPayload) (dto.UserResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 dto.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserPayload) dto.UserResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UserPayload) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, name
func (_m *UserUsecase) GetUsers(ctx context.Context, name string) ([]dto.UserResponse, error) {
	ret := _m.Called(ctx, name)

	var r0 []dto.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.UserResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, req
func (_m *UserUsecase) LoginUser(ctx context.Context, req dto.LoginRequest) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 dto.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
